#!/usr/bin/ruby
# TODO: -w

require 'onlinestatus'
exit if OnlineStatus.offline?

# needs gem 'diff-lcs'
require 'diff/lcs'
require 'digest/md5'
require 'pathname'
require 'yaml'
require 'net/http'
require 'nokogiri'
require 'parallel'

class CannotDetermineContent < StandardError; end

class UrlSource
	def initialize(url); @url = url; end
	attr_reader :url
	def content
		begin
			Net::HTTP.get(URI.parse(@url))
		rescue Errno::ECONNREFUSED
			raise CannotDetermineContent, "Connection refused reading #@url"
		rescue EOFError
			raise CannotDetermineContent, "EOF error reading #@url"
		rescue Net::ReadTimeout
			raise CannotDetermineContent, "Timeout reading #@url"
		end
	end
end

class NokogiriSource
	def initialize(url, selector); @url = url; @selector = selector; end
	attr_reader :url
	def content
		doc = Nokogiri::HTML(Net::HTTP.get(URI.parse @url))
		element = doc.search(@selector).first
		element ? element.content : ""
	end
end

confpath = (Pathname.new("~") + ".watched-sites.yml").expand_path
unless File.exist?(confpath)
	STDERR.puts "~/.watched-sites.yml not found."
	exit 1
end

def create_source(key, spec)
	case spec[:type]
	when :url, nil
		spec[:url] ? UrlSource.new(spec[:url]) : raise("No URL specified for source #{key}.")
	when :nokogiri
		(spec[:url] && spec[:selector]) ? NokogiriSource.new(spec[:url], spec[:selector]) : raise("Nokogiri source #{key} needs both URL and selector.")
	else
		raise "Unknown source type for #{key}: #{spec[:type]}"
	end
end

sites = Hash[YAML.load_file(confpath).map { |k, v| [k, create_source(k, v)] }]

path = (Pathname.new("~") + ".watched-sites-contents").expand_path
downloaded = File.exist?(path) ? YAML.load_file(path) : {}
downloaded.delete_if { |k, v| !sites.key? k }
results = Parallel.map(sites.to_a) do |pair|
	site, source = *pair

	begin
		result = source.content

		hash = Digest::MD5.hexdigest(result)

		if !downloaded.key?(site) || downloaded[site][:hash] != hash
			puts "changed site: #{site} (#{source.url}) (hash: #{hash})"

			lines1 = downloaded[site] ? downloaded[site][:content].lines : []
			lines2 = result.lines
			diff = Diff::LCS.diff(lines1, lines2)

			all_changes = []
			diff.each do |hunk|
				if hunk.first.is_a? Diff::LCS::Change
					all_changes += hunk
				else
					all_changes << hunk
				end
			end

			all_changes.each do |change|
				puts "#{change.action} #{change.position.to_s.rjust 5} #{change.element}"
			end
		end

		{
			site: site,
			content: result,
			hash: hash
		}
	rescue CannotDetermineContent => e
		puts "warning: cannot determine content: #{site} (#{e.message})"
		next
	end
end

results.each do |result|
	if result
		downloaded[result[:site]] = result
	end
end

require 'pp'
#pp downloaded
#old_downloaded = File.exist?(path) ? YAML.load_file(path) : {}
open(path, "w") do |f|
#	YAML.dump(old_downloaded.merge(downloaded), f)
	YAML.dump(downloaded, f)
end
