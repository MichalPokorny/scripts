#!/usr/bin/ruby -w

require 'onlinestatus'
exit if OnlineStatus.offline?

require 'digest/md5'
require 'pathname'
require 'yaml'
require 'net/http'
require 'nokogiri'

class UrlSource
	def initialize(url); @url = url; end
	attr_reader :url
	def content
		Net::HTTP.get(URI.parse(@url))
	end
end

class NokogiriSource
	def initialize(url, selector); @url = url; @selector = selector; end
	attr_reader :url
	def content
		doc = Nokogiri::HTML(Net::HTTP.get(URI.parse @url))
		element = doc.search(@selector).first
		element || ""
	end
end

confpath = (Pathname.new("~") + ".watched-sites.yml").expand_path
unless File.exist?(confpath)
	STDERR.puts "~/.watched-sites.yml not found."
end

def create_source(key, spec)
	case spec[:type]
	when :url, nil
		spec[:url] ? UrlSource.new(spec[:url]) : raise("No URL specified for source #{key}.")
	when :nokogiri
		(spec[:url] && spec[:selector]) ? NokogiriSource.new(spec[:url], spec[:selector]) : raise("Nokogiri source #{key} needs both URL and selector.")
	else
		raise "Unknown source type for #{key}: #{spec[:type]}"
	end
end

sites = Hash[YAML.load_file(confpath).map { |k, v| [k, create_source(k, v)] }]

path = (Pathname.new("~") + ".watched-sites-hashes").expand_path
downloaded = File.exist?(path) ? YAML.load_file(path) : {}
downloaded.delete_if { |k, v| !sites.key? k }
sites.each do |site, source|
	result = source.content
	hash = Digest::MD5.hexdigest(result)
	if !downloaded.key?(site) || downloaded[site] != hash
		puts "changed site: #{site} (#{source.url}) (hash: #{hash})"
		downloaded[site] = hash
	end
end

open(path, "w") do |f|
	YAML.dump(downloaded, f)
end
