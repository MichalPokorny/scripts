#!/bin/bash

# TODO: delete old backups automagically

BACKUP_DIRECTORY=/home/prvak/backup
DO_ARCHIVE=0
DO_ENCRYPTION=0
KEEP_REMOTE_COPY=1
SECRET="`cat /home/prvak/backup_secret`"

# TODO: unsafe: processes are public...
if [ "$1" == "--decrypt" ]; then
	FILE="$2"
	TARGET=`basename -s .gpg "$FILE"`
	if [ "$TARGET" == "$2" ]; then
		TARGET="$TARGET-decrypted.tar.bz2"
	fi
	echo "$SECRET" | gpg --batch --passphrase-fd 0 --decrypt "$FILE" > "$TARGET"
	exit
fi

[ ! -d "$BACKUP_DIRECTORY" ] && mkdir "$BACKUP_DIRECTORY"

if [ $# == 1 ]; then
	SYMLINK=$BACKUP_DIRECTORY/`basename "$1"`
	if [ -a "$SYMLINK" ]; then
		echo "$SYMLINK already exists."
		exit 1
	fi
	#ln "$1" "$SYMLINK"
	ln -s "$1" "$SYMLINK"
	exit
fi

RUSER=prvak
RHOST=rny.cz
RPATH=/home/prvak/backup

TMPDIR=/tmp/backup
LOG=/tmp/backup_log
APATH=$TMPDIR/`date +%y%m%d-%H%M.tar.bz2`
CPATH=$APATH.gpg

mkdir -p "$TMPDIR"

echo "Backup at `date +%Y`, `date +%d.%m`, `date +%H:%M`" >> "$LOG"

#if [ -d /tmp/backup ]; then umount /tmp/backup; rmdir /tmp/backup; fi
#mount -t tmpfs -o size=2G,mode=0777 tmpfs /tmp/backup

#echo "Tarring..."
#tar -C /home/prvak --recursion --dereference -cf - backup | bzip2 -9 > $APATH

#echo "Encrypting..."
#cat /home/prvak/backup_secret | gpg --batch --passphrase-fd 0 -c $APATH

#echo "Sending..."
#rsync -avzL --progress -e ssh $CPATH $RUSER@$RHOST:$RPATH

SSH_HOST="$RUSER@$RHOST"

# TODO: TAR only if changed

rsync -a --chmod=u=rwx,g=,o= --compress --copy-links --progress -e ssh "$BACKUP_DIRECTORY" $SSH_HOST:$RPATH
BACKUP_FILE="$RPATH/`date +%Y%m%d%H%M.tar.bz2`"
TAR="tar --recursion -cf - \\\"$RPATH/backup\\\" -j > \\\"$BACKUP_FILE\\\""
ENCRYPT="echo \\\"$SECRET\\\" | gpg --batch --passphrase-fd 0 -c \\\"$BACKUP_FILE\\\""

EMPTY_COMMAND="[ ]"
COMMANDS="$EMPTY_COMMAND"

if [ $DO_ARCHIVE == 1 ]; then
	COMMANDS="$COMMANDS; $TAR"

	if [ $DO_ENCRYPTION == 1 ]; then
		COMMANDS="$COMMANDS; $ENCRYPT; rm \\\"$BACKUP_FILE\\\"; rm -rf \\\"$RPATH/backup\\\""
	fi

	if [ $KEEP_REMOTE_COPY != 1 ]; then
		COMMANDS="$COMMANDS; rm -rf \\\"$RPATH/backup\\\""
	fi
fi

SSH="ssh $SSH_HOST bash -c \"$COMMANDS\""

if [ "$COMMANDS" != "$EMPTY_COMMAND" ]; then
	echo "Doing server-side work..."
	$SSH
	echo "Done."
fi

echo "Done on `date +%Y`, `date +%d.%m`, `date +%H:%M`." >> "$LOG"

rm -rf "$TMPDIR"

#umount /tmp/backup
