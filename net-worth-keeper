#!/usr/bin/ruby
# TODO: -w

# TODO: plotting

require 'onlinestatus'
exit unless OnlineStatus.online?

require 'terminal-table'
require 'pathname'
require 'csv'
require 'parallel'

LOG_PATH = "~/misc/net-worth.csv"

mode = :report
until ARGV.empty?
	case ARGV.shift
	when "--log" then mode = :log
	when "--report" then mode = :report
	else die "Usage: net-worth-keeper [--report] [--log]"
	end
end

def die(*args)
	STDERR.puts(*args) unless args.empty?
	exit 1
end

assets = [
	{ name: 'Účty a peníze', command: 'homebank-balance --raw-total' },
	{ name: 'Bitcoiny', command: 'btc-wallet-price --raw' },
	{ name: 'IKS fondy', command: 'iks-portfolio --raw' },
	{ name: 'Akcie', command: 'stock-portfolio --raw' }
]

results =
	Parallel.map(assets) do |asset|
		result = `#{asset[:command]}`.to_f
		if $?.exitstatus != 0
			if mode == :report
				puts "Failed to read asset #{asset[:name]}"
			end

			die
		end

		[asset[:name], result]
	end

unless results.all?
	if mode == :report
		puts "Something failed :("
	end
	die
end

total = results.values.inject(&:+)

case mode
	when :report
		table = Terminal::Table.new do |t|
			results.each do |asset_name, value|
				t << [asset_name, "%.2f" % value]
			end
			t << :separator
			t << ["Suma", "%.2f" % total]
		end
		puts table
	when :log
		CSV.open(Pathname.new(LOG_PATH).expand_path, "a") do |log|
			log << [
				Time.now.strftime("%Y-%m-%d %H:%M:%S"), Time.now.to_i,
				total, bank, iks, btc, stock
			]
		end
end
